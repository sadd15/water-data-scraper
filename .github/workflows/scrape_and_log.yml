name: Scrape Water Data and Log # ชื่อ Workflow

on:
  schedule:
    # เวลาไทยประมาณ 6:15 น. (23:15 UTC)
    - cron: '15 23 * * *'
  workflow_dispatch: # ให้กดรันเองได้

jobs:
  build_and_run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          # ตรวจสอบว่า requirements.txt มีอยู่จริงก่อนติดตั้ง
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, installing manually..."
            pip install selenium webdriver-manager requests google-api-python-client google-auth-httplib2 google-auth-oauthlib
          fi
          pip list # แสดงรายการ library ที่ติดตั้งแล้ว

      - name: Download and Link ChromeDriver # <<< แก้ไขวิธีเรียก webdriver-manager
        id: install_driver
        run: |
          echo "Attempting to manage ChromeDriver using Python script..."
          # ใช้ Python เพื่อเรียก webdriver-manager ให้ติดตั้ง Driver
          # และ Capture path ที่ได้ออกมาใส่ตัวแปร DRIVER_PATH
          DRIVER_PATH=$(python -c "from webdriver_manager.chrome import ChromeDriverManager; print(ChromeDriverManager().install())")
          echo "ChromeDriver downloaded/found at: $DRIVER_PATH"

          # ตรวจสอบว่าไฟล์ Driver มีอยู่จริงหรือไม่
          if [ -f "$DRIVER_PATH" ]; then
            echo "ChromeDriver executable found."
            # สร้าง Symbolic Link ไปยัง /usr/local/bin (ใช้ -sf เพื่อ force overwrite ถ้า link มีอยู่แล้ว)
            sudo ln -sf "$DRIVER_PATH" /usr/local/bin/chromedriver
            # ตรวจสอบว่า link สร้างสำเร็จ และตั้ง permission (เผื่อจำเป็น)
            if [ -L /usr/local/bin/chromedriver ]; then
               echo "Symbolic link created/updated successfully at /usr/local/bin/chromedriver"
               sudo chmod +x "$DRIVER_PATH" # ให้สิทธิ์ Execute กับตัว Driver เอง
               sudo chmod +x /usr/local/bin/chromedriver # ให้สิทธิ์ Execute กับตัว Link ด้วย
            else
               echo "Error: Failed to create symbolic link."
               # ลอง copy แทนถ้า link ไม่ได้
               echo "Attempting to copy ChromeDriver to /usr/local/bin..."
               sudo cp "$DRIVER_PATH" /usr/local/bin/chromedriver
               if [ -f /usr/local/bin/chromedriver ]; then
                  sudo chmod +x /usr/local/bin/chromedriver
                  echo "Successfully copied ChromeDriver to /usr/local/bin"
               else
                  echo "Error: Failed to copy ChromeDriver."
                  exit 1
               fi
            fi
            # ตั้งค่า Output เพื่อให้ Step อื่นใช้ Path ได้ (เผื่ออนาคต)
            echo "driver_path=$DRIVER_PATH" >> $GITHUB_OUTPUT
          else
            echo "Error: ChromeDriver executable not found at '$DRIVER_PATH' after install attempt."
            exit 1
          fi
        continue-on-error: false # <<< สำคัญ: ต้องติดตั้ง Driver ให้สำเร็จ

      - name: Create credentials.json from Secret
        env:
          CREDENTIALS_DATA: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
        run: |
          echo "Checking credentials secret..."
          if [ -z "$CREDENTIALS_DATA" ]; then echo "Error: GOOGLE_CREDENTIALS_JSON secret is not set."; exit 1; fi
          echo "$CREDENTIALS_DATA" > credentials.json
          echo "credentials.json created."

      - name: Create token.json from Secret if available
        env:
          TOKEN_DATA: ${{ secrets.GOOGLE_TOKEN_JSON }}
        run: |
          echo "Checking token secret..."
          if [ ! -z "$TOKEN_DATA" ]; then
            echo "$TOKEN_DATA" > token.json
            echo "token.json created from secret."
          else
            echo "GOOGLE_TOKEN_JSON secret not set. Script will attempt authorization if needed."
            touch token.json # สร้างไฟล์เปล่าเผื่อไว้
          fi

      - name: Run Python Scraper Script
        run: python selenium_table_scraper.py # <<< ตรวจสอบว่าชื่อไฟล์ Python ถูกต้อง
        # อาจจะไม่ต้องใช้ env: CHROMEDRIVER_PATH แล้ว เพราะเราสร้าง link ไว้ที่ /usr/local/bin
